{
  "hash": "56f82405691c3ec37f35d907141eb2b0",
  "result": {
    "markdown": "---\nfreeze: true\n---\n\n\n# Binary data formats {#sec-binary-data}\n\n\n\n:::: status\n::: callout-important \nYou are reading the work-in-progress second edition of R for Data Science. This chapter is currently a dumping ground for ideas, and we don't recommend reading it. You can find the complete first edition at <https://r4ds.had.co.nz>.\n:::\n::::\n\n\n## Introduction\n\n### Prerequisites\n\nThis chapter focuses on large data sets, and binary file formats that are well suited to working with them.\nWe'll use a data set of item checkouts from Seattle public libraries, available online at [data.seattle.gov/Community/Checkouts-by-Title/tmmm-ytt6](https://data.seattle.gov/Community/Checkouts-by-Title/tmmm-ytt6).\nThe data is distributed as a single 9GB csv file, so it may take some time to download.\nFor the purposes of this chapter we'll assume that you have a local copy of the file at `data/seattle-library-checkout.csv`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(arrow)\nlibrary(duckdb)\nlibrary(dbplyr)\n```\n:::\n\n\n## The arrow package\n\nIn this chapter we'll rely on Apache Arrow ([arrow.apache.org](https://arrow.apache.org/)), a multi-language toolbox designed for efficient analysis and transport of large data sets.\nThe [arrow package](https://arrow.apache.org/docs/r/) provides a standard way to use Apache Arrow in R, and allows you to analyze larger-than-memory datasets using familiar dplyr syntax.\nAs an additional benefit, arrow is extremely fast: you'll see some examples later in the chapter.\n\n### Opening datasets\n\nLet's start by taking a look at the Seattle library checkout data.\nAt 9GB in size, the csv file is large enough that we probably don't want to load the whole thing into memory: a good rule of thumb is that you usually want at least twice as much memory as the size of the data.\nInstead of using `read_csv()` we'll use the `open_dataset()` function from the arrow package:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattle_lib <- open_dataset(\n  sources = \"data/seattle-library-checkouts.csv\", \n  format = \"csv\"\n)\n```\n:::\n\n\nWhen this code is run, `open_dataset()` scans the first part of the file: it reads enough rows to work out the structure of the data set structure and creates the `seattle_lib` object that stores metadata.\nThe data remain on-disk, and are not loaded into memory.\nNevertheless, we are able to call dplyr functions to interact with the data:\n\n\n::: {.cell hash='binary-data-formats_cache/html/glimpse-data_75d5cfe6cbb12e2777b896993db1e015'}\n\n```{.r .cell-code}\nglimpse(seattle_lib)\n#> FileSystemDataset with 1 csv file\n#> 41,389,465 rows x 12 columns\n#> $ UsageClass      <string> \"Physical\", \"Physical\", \"Physical\", \"Physical\", \"Phys…\n#> $ CheckoutType    <string> \"Horizon\", \"Horizon\", \"Horizon\", \"Horizon\", \"Horizon\"…\n#> $ MaterialType    <string> \"BOOK\", \"SOUNDDISC\", \"SOUNDDISC\", \"BOOK\", \"VIDEODISC\"…\n#> $ CheckoutYear     <int64> 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022, 2022,…\n#> $ CheckoutMonth    <int64> 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 1…\n#> $ Checkouts        <int64> 2, 1, 1, 4, 4, 1, 1, 2, 1, 3, 2, 7, 3, 2, 1, 3, 3, 1,…\n#> $ Title           <string> \"Ten count. Volume 5 / story and art by Rihito Takara…\n#> $ ISBN            <string> \"1421593734, 9781421593739\", \"\", \"0063016141, 9780063…\n#> $ Creator         <string> \"Takarai, Rihito\", \"Cassidy, Eva\", \"Hampton, Dan\", \"P…\n#> $ Subjects        <string> \"Comic books strips etc Japan Translations into Engli…\n#> $ Publisher       <string> \"SuBLime Manga,\", \"Blix Street Records,\", \"Harper Aud…\n#> $ PublicationYear <string> \"[2017]\", \"[1998]\", \"[2020]\", \"2019.\", \"[2022]\", \"[20…\n```\n:::\n\n\nThe first line in the output tell you that `seattle_lib` is stored locally on-disk as a single csv file.\nThe second line indicates that the data are stored as a tabular data set with 41 million rows and 12 columns.\n\n### Partitioning datasets\n\nWhen data sets become large it is often useful to split them across many files rather than storing everything in a single large file.\nWhen this structuring is done intelligently, the multi-file strategy can lead to significant improvements in performance because some analyses will only require a subset of the files to be read.\n\nWhen deciding to pursue a multi-file strategy, the first task is to decide how to partition your data set.\nIf you break the data set into too few files you won't gain the performance improvements you're hoping for, but if you break it into too many you won't gain much either.\nIf you split the data in a meaningful way, you'll get some performance advantages, but if you split the data randomly you probably won't see a lot of gains.\nThere are no hard and fast rules about how to partition a data set: the results will depend on your data, access patterns, and the systems that read the data.\nAs a rough guide, the arrow package documentation suggests the following heuristics:\n\n-   Avoid files smaller than 20MB and larger than 2GB.\n-   Avoid partitioning layouts that produce more than 10,000 distinct files.\n\nAs a general rule, a useful strategy for partitioning a large dataset is to create meaningful subsets based on one or more variables that you're likely to use to filter the data.\n\n### Writing datasets\n\nThe guidelines in the last section suggest that the Seattle library data is a little too large to store as a single file.\nHow should we split it up?\nIt's reasonable to guess that our analyses might filter the data by `CheckoutYear`, so we'll use that as our partitioning variable.\n\nPartitioning a data set can be done using the `write_dataset()` function from the arrow package, which respects the grouping created by the dplyr `group_by()` function.\nTo create a multi-file data set with one parquet file per year of library data we would do the following:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattle_lib |>\n  group_by(CheckoutYear) |>\n  write_dataset(\n    path = \"data/seattle-library-checkouts\",\n    format = \"parquet\"\n  )\n```\n:::\n\n\nWe'll talk more about the parquet format in @sec-parquet.\nFor the moment, let's take a look at the files:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattle_lib_files <- list.files(\n  path = \"data/seattle-library-checkouts\",\n  recursive = TRUE\n) \nseattle_lib_files\n#>  [1] \"CheckoutYear=2005/part-0.parquet\" \"CheckoutYear=2006/part-0.parquet\"\n#>  [3] \"CheckoutYear=2007/part-0.parquet\" \"CheckoutYear=2008/part-0.parquet\"\n#>  [5] \"CheckoutYear=2009/part-0.parquet\" \"CheckoutYear=2010/part-0.parquet\"\n#>  [7] \"CheckoutYear=2011/part-0.parquet\" \"CheckoutYear=2012/part-0.parquet\"\n#>  [9] \"CheckoutYear=2013/part-0.parquet\" \"CheckoutYear=2014/part-0.parquet\"\n#> [11] \"CheckoutYear=2015/part-0.parquet\" \"CheckoutYear=2016/part-0.parquet\"\n#> [13] \"CheckoutYear=2017/part-0.parquet\" \"CheckoutYear=2018/part-0.parquet\"\n#> [15] \"CheckoutYear=2019/part-0.parquet\" \"CheckoutYear=2020/part-0.parquet\"\n#> [17] \"CheckoutYear=2021/part-0.parquet\" \"CheckoutYear=2022/part-0.parquet\"\n```\n:::\n\n\nThese file names follow a \"self-describing\" convention used by the Apache Hive project ([hive.apache.org](https://hive.apache.org/)).\nHive-style partitions name folders using a \"key=value\" convention, and the data files in that folder contain the subset of the data for which the key has the relevant value.\nFollowing this convention makes it easier to locate files relevant to a particular query.\n\n### Using dplyr with arrow\n\nWriting dplyr code for arrow data is conceptually similar to dbplyr, described in @sec-import-databases.\nThe dplyr code that you write in R is internally transformed to a query that the Apache Arrow C++ library understands, which is then executed when you call `collect()`.\nLet's work through an example.\n\nWe'll start by opening the partitioned parquet version of the dataset created in the last section.\nAs we'll discuss in @sec-parquet-fast, our analysis runs much faster using this version of the dataset:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattle_lib2 <- open_dataset(\"data/seattle-library-checkouts/\")\n```\n:::\n\n\nNext we'll write our dplyr pipeline.\nFor our example we'll count the total number of books checked out in each year for the last five years:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery <- seattle_lib2 |> \n  filter(CheckoutYear >= 2018, MaterialType == \"BOOK\") |>\n  group_by(CheckoutYear) |>\n  summarise(TotalCheckouts = sum(Checkouts)) |>\n  arrange(desc(CheckoutYear))\n```\n:::\n\n\nJust like dbplyr, this pipeline defines instructions that arrow will execute when requested.\nIf we print out the `query` object we can see a little information about what we expect Arrow to return when the execution takes place:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquery\n#> FileSystemDataset (query)\n#> CheckoutYear: int32\n#> TotalCheckouts: int64\n#> \n#> * Sorted by CheckoutYear [desc]\n#> See $.data for the source Arrow object\n```\n:::\n\n\nThis looks right, so we can now go ahead and call `collect()` to evaluate the query:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncollect(query)\n#> # A tibble: 5 × 2\n#>   CheckoutYear TotalCheckouts\n#>          <int>          <int>\n#> 1         2022        2431502\n#> 2         2021        2266438\n#> 3         2020        1241999\n#> 4         2019        3931688\n#> 5         2018        3987569\n```\n:::\n\n\nLike dbplyr, arrow only understands some R expressions, so you may not be able to write exactly the same code you usually would.\nHowever, the list of operations and functions supported is fairly extensive and growing.\nA complete list is provided in the arrow package documentation at [arrow.apache.org/docs/r/reference/acero.html](https://arrow.apache.org/docs/r/reference/acero.html).\n\n### Using dbplyr with arrow\n\nThere's also an even more direct connection between arrow and dbplyr -- it's very easy to turn an arrow dataset into a duckdb datasource using the arrow `to_duckdb()` function (and vice versa with `to_arrow()`).\nTo illustrate this, let's run the analysis from the last section using duckdb to do the computing work:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nseattle_lib2 |> \n  to_duckdb() |>\n  filter(CheckoutYear >= 2018, MaterialType == \"BOOK\") |>\n  group_by(CheckoutYear) |>\n  summarise(TotalCheckouts = sum(Checkouts)) |>\n  arrange(desc(CheckoutYear)) |>\n  collect()\n#> Warning: Missing values are always removed in SQL aggregation functions.\n#> Use `na.rm = TRUE` to silence this warning\n#> This warning is displayed once every 8 hours.\n#> # A tibble: 5 × 2\n#>   CheckoutYear TotalCheckouts\n#>          <int>          <dbl>\n#> 1         2022        2431502\n#> 2         2021        2266438\n#> 3         2020        1241999\n#> 4         2019        3931688\n#> 5         2018        3987569\n```\n:::\n\n\nThe nice thing about `to_duckdb()` is that the transfer doesn't involve any memory copying, and speaks to the goals of the arrow ecosystem: enable seamless transitions from one computing framework to another.\n\n## The parquet file format {#sec-parquet}\n\nWhen working with small data sets, csv files can be convenient: they're human readable plain text files, and most analysis tools can read data from a csv.\nHowever, there are some drawbacks:\n\n-   Ambiguity.\n    As we talked about in @sec-col-types, a csv file does not provide any information about column types.\n    For example, a csv reader has to guess whether `\"08-10-2022\"` should be parsed as a string or a date.\n    If it is a date, it has to guess whether the date refers to October 8th or August 10th.\n    Here is a slightly contrived example.\n    Here is a small tibble that contains some integers and some strings that look suspiciously like dates:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    original <- tibble(\n      integers = 1L:3L,\n      strings = c(\"2022-01-01\", \"1980-12-01\", \"1900-12-12\")\n    )\n    original\n    #> # A tibble: 3 × 2\n    #>   integers strings   \n    #>      <int> <chr>     \n    #> 1        1 2022-01-01\n    #> 2        2 1980-12-01\n    #> 3        3 1900-12-12\n    ```\n    :::\n\n\n    Simple though it is, this data set poses problems for a csv file.\n    The csv version of this data does not explicitly specify that the first column contains integers and the second column contains strings.\n    This produces ambiguity because the csv reader guesses that the data types are double and character respectively:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    csv_file <- tempfile(fileext = \".csv\")\n    write_csv(original, csv_file)\n    read_csv(csv_file, show_col_types = FALSE)\n    #> # A tibble: 3 × 2\n    #>   integers strings   \n    #>      <dbl> <date>    \n    #> 1        1 2022-01-01\n    #> 2        2 1980-12-01\n    #> 3        3 1900-12-12\n    ```\n    :::\n\n\n    The `read_csv()` and `write_csv()` functions are designed to avoid this issue to an extent, but it is impossible to avoid it completely because the csv format is inherently ambiguous.\n\n-   Large size.\n    A csv file is not compressed by default, and tends to be much larger than file formats that use more economical coding and compression tools.\n\n-   Poor performance.\n    Compared to other formats, csv files can be slow to read and write.\n    This is partly due to the larger file taking longer to read from disk, but also in part due to the differences between how data are represented on-disk and in-memory.\n\n-   Inaccuracy.\n    Plain text files store binary numeric data inaccurately due to precision limits.\n    We can verify this by writing 1000 random numbers to a csv file and then reloading the data from the file\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    csv_file <- tempfile(fileext = \".csv\")\n    original <- tibble(old_x = rnorm(1000))\n    write_csv(original, csv_file)\n    reloaded <- read_csv(csv_file) |>\n      rename(new_x = old_x)\n    ```\n    :::\n\n\n    Now let's compare the two, counting the number of times the original value is strictly identical to the reloaded one:\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    bind_cols(original, reloaded) |> \n      mutate(same_value = old_x == new_x) |>\n      count(same_value)\n    #> # A tibble: 2 × 2\n    #>   same_value     n\n    #>   <lgl>      <int>\n    #> 1 FALSE        156\n    #> 2 TRUE         844\n    ```\n    :::\n\n\n    A substantial proportion of the reloaded values differ from the original ones.\n    These differences are very small in magnitude, and occur because the csv represents numeric values with limited precision.\n    Even so this can still be a source of problems in your analysis code.\n\nThe Apache Parquet file format ([parquet.apache.org](https://parquet.apache.org/)) is designed to address these limitations.\nLike a csv file, a parquet file stores a single rectangular data set.\nFeatures of the parquet format that make it appealing for data scientists include:\n\n-   Parquet is an open standards-based format widely used by big data systems, so there is little to no risk of vendor lock-in as sometimes occurs with proprietary data formats.\n-   Parquet files store data in a binary format (not plain text) that supports a rich type system, avoiding inaccuracy and ambiguity in data storage.\n-   The Parquet format supports compression, and parquet files commonly use compression to reduce file size. It also relies on [efficient encodings](https://parquet.apache.org/docs/file-format/data-pages/encodings/) to keep file size down.\n-   Parquet files internally break the data into distinct chunks, each with associated metadata. This makes it possible to write intelligent file readers that can jump straight to a specific part of the data when the full data set is not needed.\n\nAll these factors together make the parquet format appealing when working with larger data sets.\n\nThe arrow package supplies `read_parquet()` and `write_parquet()` functions that can read and write data in the parquet format.\nWe'll use these functions to explore the advantages to parquet files.\n\n### Parquet files are unambiguous\n\nRecall this example from earlier:\n\n\n::: {.cell}\n\n```{.r .cell-code}\noriginal <- tibble(\n  integers = 1L:3L,\n  strings = c(\"2022-01-01\", \"1980-12-01\", \"1900-12-12\")\n)\noriginal\n#> # A tibble: 3 × 2\n#>   integers strings   \n#>      <int> <chr>     \n#> 1        1 2022-01-01\n#> 2        2 1980-12-01\n#> 3        3 1900-12-12\n```\n:::\n\n\nAs we saw, writing this data to a csv file and reading it back in leads to a mistake in identifying the data types for each column.\nThe parquet format avoids this ambiguity.\nWhen we write the data set to a parquet file using `write_parquet()` and then read it back in with `read_parquet()`, the data types are preserved:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparquet_file <- tempfile(fileext = \".parquet\")\nwrite_parquet(original, parquet_file)\nread_parquet(parquet_file)\n#> # A tibble: 3 × 2\n#>   integers strings   \n#>      <int> <chr>     \n#> 1        1 2022-01-01\n#> 2        2 1980-12-01\n#> 3        3 1900-12-12\n```\n:::\n\n\n### Parquet files are binary\n\nEarlier in this section we saw an example in which csv files store numeric data inaccurately because they use plain text rather than binary format.\nLet's repeat the exercise using the binary parquet format.\nWe first write some random numbers to a parquet file:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nparquet_file <- tempfile(fileext = \".parquet\")\noriginal <- tibble(old_x = rnorm(1000))\nwrite_parquet(original, parquet_file)\n```\n:::\n\n\nNext we load the file and give the reloaded variable a new name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nreloaded <- read_parquet(parquet_file) |>\n  rename(new_x = old_x)\n```\n:::\n\n\nFinally we bind the old and new data sets together and compare them:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbind_cols(original, reloaded) |> \n  mutate(same_value = old_x == new_x) |>\n  count(same_value)\n#> # A tibble: 1 × 2\n#>   same_value     n\n#>   <lgl>      <int>\n#> 1 TRUE        1000\n```\n:::\n\n\nAs you can see, numeric values stored in parquet files are stored faithfully.\nLoading the data from file produces the same values in the original data set.\n\n### Parquet files are smaller\n\nWe can use the Seattle library data set to highlight the advantage in file size.\nThe `write_parquet()` function can take an Arrow Dataset object like `seattle_lib` as the input, so we can write the file like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_parquet(seattle_lib, \"data/seattle-library-checkouts.parquet\")\n```\n:::\n\n\nNow let's compare the two files in size:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfile.size(\"data/seattle-library-checkouts.csv\")\n#> [1] 9211969044\nfile.size(\"data/seattle-library-checkouts.parquet\")\n#> [1] 4403674061\n```\n:::\n\n\nThe parquet file is about half the size of the csv file.\n\n### Parquet files are faster {#sec-parquet-fast}\n\nThe format of your data file can have a substantial impact on how long a data analysis pipeline takes to execute.\nTo see this, let's time how long it takes to count the number of books checked out in each month of 2021 when the data are stored in csv format:\n\n\n::: {.cell hash='binary-data-formats_cache/html/dataset-performance-csv_5f73293bf68b845adbe3198fc11801d9'}\n\n```{.r .cell-code}\nsystem.time({\n  open_dataset(\n    sources = \"data/seattle-library-checkouts.csv\", \n    format = \"csv\"\n  ) |>\n    filter(CheckoutYear == 2021, MaterialType == \"BOOK\") |>\n    group_by(CheckoutMonth) |>\n    summarise(TotalCheckouts = sum(Checkouts)) |>\n    arrange(desc(CheckoutMonth)) |>\n    collect()\n})\n#>    user  system elapsed \n#>  14.027   2.489  14.158\n```\n:::\n\n\nNow let's repeat the exercise using the parquet file:\n\n\n::: {.cell hash='binary-data-formats_cache/html/dataset-performance-parquet_6cfe5b58341917dbbf44d0b1becfab4a'}\n\n```{.r .cell-code}\nsystem.time({\n  open_dataset(\n    sources = \"data/seattle-library-checkouts.parquet\", \n    format = \"parquet\"\n  ) |>\n    filter(CheckoutYear == 2021, MaterialType == \"BOOK\") |>\n    group_by(CheckoutMonth) |>\n    summarise(TotalCheckouts = sum(Checkouts)) |>\n    arrange(desc(CheckoutMonth)) |>\n    collect()\n})\n#>    user  system elapsed \n#>   2.129   0.663   1.368\n```\n:::\n\n\nThe analysis of the parquet data finishes in about one tenth the time it takes to perform the same analysis with the csv data.\n\nThe speed-up is even more noticeable with the partitioned parquet data set:\n\n\n::: {.cell hash='binary-data-formats_cache/html/dataset-performance-multiple-parquet_99625178da5d3354e2f84f60118a70ec'}\n\n```{.r .cell-code}\nsystem.time({\n  open_dataset(\n    sources = \"data/seattle-library-checkouts/\", \n    format = \"parquet\"\n  ) |>\n    filter(CheckoutYear == 2021, MaterialType == \"BOOK\") |>\n    group_by(CheckoutMonth) |>\n    summarise(TotalCheckouts = sum(Checkouts)) |>\n    arrange(desc(CheckoutMonth)) |>\n    collect()\n})\n#>    user  system elapsed \n#>   0.430   0.063   0.157\n```\n:::\n\n\nThis is a 10-fold speed up compared to a single parquet file, and a 100-fold speed up compared to the original csv file.\n\n<!-- ### Data in the cloud -->\n\n<!-- Sometimes when working with large datasets you encounter the situation when data files are stored remotely on cloud storage services such as Amazon's Simple Storage Service (S3) or Google Cloud Storage (GCS). -->\n\n<!-- Functions in arrow that read and write data, including `open_dataset()`, are able to read and write from remote data sources with the help of the `s3_bucket()` function (for Amazon S3) or the `gs_bucket()` function (for Google cloud). -->\n\n<!-- An example is shown below: -->\n\n<!-- ```{r open-s3-dataset} -->\n\n<!-- #| cache: true -->\n\n<!-- diamonds <- s3_bucket(\"voltrondata-labs-datasets/diamonds\") -->\n\n<!-- diamonds |>  -->\n\n<!--   open_dataset() |> -->\n\n<!--   glimpse() -->\n\n<!-- ``` -->\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}