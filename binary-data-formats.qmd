---
freeze: true
---

# Binary data formats {#sec-binary-data}

```{r setup}
#| results: "asis"
#| echo: false
source("_common.R")
status("drafting")
```

## Introduction

### Prerequisites

This chapter focuses on large data sets, and binary file formats that are well suited to working with them.
We'll use a data set of item checkouts from Seattle public libraries, available online at [data.seattle.gov/Community/Checkouts-by-Title/tmmm-ytt6](https://data.seattle.gov/Community/Checkouts-by-Title/tmmm-ytt6).
The data is distributed as a single 9GB csv file, so it may take some time to download.
For the purposes of this chapter we'll assume that you have a local copy of the file at `data/seattle-library-checkout.csv`.

```{r load-packages}
#| message: false
#| warning: false
library(tidyverse)
library(arrow)
library(duckdb)
library(dbplyr)
```

## The arrow package

In this chapter we'll rely on Apache Arrow ([arrow.apache.org](https://arrow.apache.org/)), a multi-language toolbox designed for efficient analysis and transport of large data sets.
The [arrow package](https://arrow.apache.org/docs/r/) provides a standard way to use Apache Arrow in R, and allows you to analyze larger-than-memory datasets using familiar dplyr syntax.
As an additional benefit, arrow is extremely fast: you'll see some examples later in the chapter.

### Opening datasets

Let's start by taking a look at the Seattle library checkout data.
At 9GB in size, the csv file is large enough that we probably don't want to load the whole thing into memory: a good rule of thumb is that you usually want at least twice as much memory as the size of the data.
Instead of using `read_csv()` we'll use the `open_dataset()` function from the arrow package:

```{r open-dataset}
seattle_lib <- open_dataset(
  sources = "data/seattle-library-checkouts.csv", 
  format = "csv"
)
```

When this code is run, `open_dataset()` scans the first part of the file: it reads enough rows to work out the structure of the data set structure and creates the `seattle_lib` object that stores metadata.
The data remain on-disk, and are not loaded into memory.
Nevertheless, we are able to call dplyr functions to interact with the data:

```{r glimpse-data}
#| cache: true
glimpse(seattle_lib)
```

The first line in the output tell you that `seattle_lib` is stored locally on-disk as a single csv file.
The second line indicates that the data are stored as a tabular data set with 41 million rows and 12 columns.

### Partitioning datasets

When data sets become large it is often useful to split them across many files rather than storing everything in a single large file.
When this structuring is done intelligently, the multi-file strategy can lead to significant improvements in performance because some analyses will only require a subset of the files to be read.

When deciding to pursue a multi-file strategy, the first task is to decide how to partition your data set.
If you break the data set into too few files you won't gain the performance improvements you're hoping for, but if you break it into too many you won't gain much either.
If you split the data in a meaningful way, you'll get some performance advantages, but if you split the data randomly you probably won't see a lot of gains.
There are no hard and fast rules about how to partition a data set: the results will depend on your data, access patterns, and the systems that read the data.
As a rough guide, the arrow package documentation suggests the following heuristics:

-   Avoid files smaller than 20MB and larger than 2GB.
-   Avoid partitioning layouts that produce more than 10,000 distinct files.

As a general rule, a useful strategy for partitioning a large dataset is to create meaningful subsets based on one or more variables that you're likely to use to filter the data.

### Writing datasets

The guidelines in the last section suggest that the Seattle library data is a little too large to store as a single file.
How should we split it up?
It's reasonable to guess that our analyses might filter the data by `CheckoutYear`, so we'll use that as our partitioning variable.

Partitioning a data set can be done using the `write_dataset()` function from the arrow package, which respects the grouping created by the dplyr `group_by()` function.
To create a multi-file data set that contains a separate file for each year of library checkout data, we can do this:

```{r write-dataset}
#| eval: !expr "!file.exists('data/seattle-library-checkouts/CheckoutYear=2021/part-0.parquet')"
seattle_lib |>
  group_by(CheckoutYear) |>
  write_dataset(
    path = "data/seattle-library-checkouts",
    format = "parquet"
  )
```

The `path` argument is used to specify the folder into which all the data files will be written, and the `format` argument is used to specify the file format for the data files.
We'll talk more about the parquet format in @sec-parquet.
For the moment, let's take a look at the files:

```{r show-parquet-files}
seattle_lib_files <- list.files(
  path = "data/seattle-library-checkouts",
  recursive = TRUE
) 
seattle_lib_files
```

Our single 9GB csv file has been rewritten as 18 parquet files that are typically between 150MB and 300MB in size.

The file names shown in the output above follow a "self-describing" convention used by the Apache Hive project ([hive.apache.org](https://hive.apache.org/)).
Hive-style partitions name folders using a "key=value" convention, and the data files in that folder contain the subset of the data for which the key (in this case "CheckoutYear") has the relevant value (e.g., 2009, 2010, etc).
Following this naming convention makes it easier to locate files relevant to a particular query.

### Using dplyr with arrow

Writing dplyr code for arrow data is conceptually similar to dbplyr, described in @sec-import-databases.
The dplyr code that you write in R is internally transformed to a query that the Apache Arrow C++ library understands, which is then executed when you call `collect()`.
Let's work through an example.

We'll start by opening the partitioned parquet version of the dataset created in the last section.
As we'll discuss in @sec-parquet-fast, our analysis runs much faster using this version of the dataset:

```{r open-partitioned-parquet}
seattle_lib2 <- open_dataset("data/seattle-library-checkouts/")
```

Next we'll write our dplyr pipeline.
For our example we'll count the total number of books checked out in each year for the last five years:

```{r books-by-year-query}
query <- seattle_lib2 |> 
  filter(CheckoutYear >= 2018, MaterialType == "BOOK") |>
  group_by(CheckoutYear) |>
  summarise(TotalCheckouts = sum(Checkouts)) |>
  arrange(desc(CheckoutYear))
```

Just like dbplyr, this pipeline defines instructions that arrow will execute when requested.
If we print out the `query` object we can see a little information about what we expect Arrow to return when the execution takes place:

```{r}
query
```

This looks right, so we can now go ahead and call `collect()` to evaluate the query:

```{r books-by-year}
collect(query)
```

Like dbplyr, arrow only understands some R expressions, so you may not be able to write exactly the same code you usually would.
However, the list of operations and functions supported is fairly extensive and growing.
A complete list is provided in the arrow package documentation at [arrow.apache.org/docs/r/reference/acero.html](https://arrow.apache.org/docs/r/reference/acero.html).

### Using dbplyr with arrow

There's also an even more direct connection between arrow and dbplyr -- it's very easy to turn an arrow dataset into a duckdb datasource using the arrow `to_duckdb()` function (and vice versa with `to_arrow()`).
To illustrate this, let's run the analysis from the last section using duckdb to do the computing work:

```{r use-duckdb}
seattle_lib2 |> 
  to_duckdb() |>
  filter(CheckoutYear >= 2018, MaterialType == "BOOK") |>
  group_by(CheckoutYear) |>
  summarise(TotalCheckouts = sum(Checkouts)) |>
  arrange(desc(CheckoutYear)) |>
  collect()
```

The nice thing about `to_duckdb()` is that the transfer doesn't involve any memory copying, and speaks to the goals of the arrow ecosystem: enable seamless transitions from one computing framework to another.

## The parquet file format {#sec-parquet}

When working with small data sets csv files can be convenient, but they may not be the best choice for larger data sets.
The Apache Parquet file format ([parquet.apache.org](https://parquet.apache.org/)) is a open standards-based format widely used by big data systems that is often more useful.
Like a csv file, a parquet file stores a single rectangular data set, but differs in several important respects:

-   Parquet files are usually smaller.
    A csv file is a plain text format, and tends to be larger than file formats that use more economical coding and support compression.
    Parquet relies on [efficient encodings](https://parquet.apache.org/docs/file-format/data-pages/encodings/) to keep file size down, and supports file compression.

-   Parquet files have a rich type system.
    As we talked about in @sec-col-types, a csv file does not provide any information about column types.
    For example, a csv reader has to guess whether `"08-10-2022"` should be parsed as a string or a date.
    In contrast, parquet files store data in a binary format (not plain text) that supports a rich type system allowing data to be read without the guesswork that csv reading requires.

-   Parquet files are structured.
    Internally, parquet files break the data into distinct chunks, each with associated metadata.
    The inclusion of this metadata makes it possible to write economical file readers that only read those parts of the file that contain relevant data.

In addition to the `open_dataset()` and `write_dataset()` functions that understand datasets in csv and parquet format, the arrow package supplies the `read_parquet()` and `write_parquet()` functions that can read and write data in from a single parquet.
We'll use these functions to examine parquet files in more detail.

NEEDS TIDYING FROM HERE

### Parquet files are smaller

We can use the Seattle library data set to highlight the advantage in file size.
The `write_parquet()` function can take an Arrow Dataset object like `seattle_lib` as the input, so we can write the file like this:

```{r write-parquet}
#| eval: !expr "!file.exists('data/seattle-library-checkouts.parquet')"
write_parquet(seattle_lib, "data/seattle-library-checkouts.parquet")
```

Now let's compare the two files in size:

```{r compare-file-sizes}
file.size("data/seattle-library-checkouts.csv")
file.size("data/seattle-library-checkouts.parquet")
```

The parquet file is about half the size of the csv file.

### Parquet files are faster {#sec-parquet-fast}

The format of your data file can have a substantial impact on how long a data analysis pipeline takes to execute.
To see this, let's time how long it takes to count the number of books checked out in each month of 2021 when the data are stored in csv format:

```{r dataset-performance-csv}
#| cache: true
system.time({
  open_dataset(
    sources = "data/seattle-library-checkouts.csv", 
    format = "csv"
  ) |>
    filter(CheckoutYear == 2021, MaterialType == "BOOK") |>
    group_by(CheckoutMonth) |>
    summarise(TotalCheckouts = sum(Checkouts)) |>
    arrange(desc(CheckoutMonth)) |>
    collect()
})
```

Now let's repeat the exercise using the parquet file:

```{r dataset-performance-parquet}
#| cache: true
system.time({
  open_dataset(
    sources = "data/seattle-library-checkouts.parquet", 
    format = "parquet"
  ) |>
    filter(CheckoutYear == 2021, MaterialType == "BOOK") |>
    group_by(CheckoutMonth) |>
    summarise(TotalCheckouts = sum(Checkouts)) |>
    arrange(desc(CheckoutMonth)) |>
    collect()
})
```

The analysis of the parquet data finishes in about one tenth the time it takes to perform the same analysis with the csv data.

The speed-up is even more noticeable with the partitioned parquet data set:

```{r dataset-performance-multiple-parquet}
#| cache: true
system.time({
  open_dataset(
    sources = "data/seattle-library-checkouts/", 
    format = "parquet"
  ) |>
    filter(CheckoutYear == 2021, MaterialType == "BOOK") |>
    group_by(CheckoutMonth) |>
    summarise(TotalCheckouts = sum(Checkouts)) |>
    arrange(desc(CheckoutMonth)) |>
    collect()
})
```

This is a 10-fold speed up compared to a single parquet file, and a 100-fold speed up compared to the original csv file.

### Parquet files are unambiguous

Here is a slightly contrived example.
Here is a small tibble that contains some integers and some strings that look suspiciously like dates:

```{r csv-ambiguity-example}
original <- tibble(
  integers = 1L:3L,
  strings = c("2022-01-01", "1980-12-01", "1900-12-12")
)
original
```

Simple though it is, this data set poses problems.
The csv version of this data does not explicitly specify that the first column contains integers and the second column contains strings.
This produces ambiguity because `read_csv()` guesses that the data types are double and date respectively:

```{r csv-ambiguity-failure}
csv_file <- tempfile(fileext = ".csv")
write_csv(original, csv_file)
read_csv(csv_file, show_col_types = FALSE)
```

The parquet format avoids this ambiguity.
When we write the data set to a parquet file using `write_parquet()` and then read it back in with `read_parquet()`, the data types are preserved:

```{r read-parquet-unambigiously}
parquet_file <- tempfile(fileext = ".parquet")
write_parquet(original, parquet_file)
read_parquet(parquet_file)
```

### Parquet files are binary

Earlier in this section we saw an example in which csv files store numeric data inaccurately because they use plain text rather than binary format.

We can verify this by writing 1000 random numbers to a csv file and then reloading the data from the file

```{r csv-precision-failure}
#| message: false
csv_file <- tempfile(fileext = ".csv")
original <- tibble(old_x = rnorm(1000))
write_csv(original, csv_file)
reloaded <- read_csv(csv_file) |>
  rename(new_x = old_x)
```

Now let's compare the two, counting the number of times the original value is strictly identical to the reloaded one:

```{r csv-precision-failure-2}
bind_cols(original, reloaded) |> 
  mutate(same_value = old_x == new_x) |>
  count(same_value)
```

A substantial proportion of the reloaded values differ from the original ones.
These differences are very small in magnitude, and occur because the csv represents numeric values with limited precision.
Even so this can still be a source of problems in your analysis code.

Let's repeat the exercise using the binary parquet format.
We first write some random numbers to a parquet file:

```{r parquet-precision-write}
#| message: false
parquet_file <- tempfile(fileext = ".parquet")
original <- tibble(old_x = rnorm(1000))
write_parquet(original, parquet_file)
```

Next we load the file and give the reloaded variable a new name:

```{r parquet-precision-read}
reloaded <- read_parquet(parquet_file) |>
  rename(new_x = old_x)
```

Finally we bind the old and new data sets together and compare them:

```{r parquet-precision-success}
bind_cols(original, reloaded) |> 
  mutate(same_value = old_x == new_x) |>
  count(same_value)
```

As you can see, numeric values stored in parquet files are stored faithfully.
Loading the data from file produces the same values in the original data set.

<!-- ### Data in the cloud -->

<!-- Sometimes when working with large datasets you encounter the situation when data files are stored remotely on cloud storage services such as Amazon's Simple Storage Service (S3) or Google Cloud Storage (GCS). -->

<!-- Functions in arrow that read and write data, including `open_dataset()`, are able to read and write from remote data sources with the help of the `s3_bucket()` function (for Amazon S3) or the `gs_bucket()` function (for Google cloud). -->

<!-- An example is shown below: -->

<!-- ```{r open-s3-dataset} -->

<!-- #| cache: true -->

<!-- diamonds <- s3_bucket("voltrondata-labs-datasets/diamonds") -->

<!-- diamonds |>  -->

<!--   open_dataset() |> -->

<!--   glimpse() -->

<!-- ``` -->
