# Tibbles {#sec-tibbles}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
status("complete")
```

## Introduction

### Prerequisites

In this chapter we'll explore the **tibble** package, part of the core tidyverse.

```{r}
#| label: setup
#| message: false

library(tidyverse)
```

## Tibbles vs. data.frame

There are two main differences in the usage of a tibble vs. a classic `data.frame`: printing and subsetting.
If these difference cause problems when working with older packages, you can turn a tibble back to a regular data frame with `as.data.frame()`.

### Printing

Tibbles have a refined print method that shows only the first 10 rows, and all the columns that fit on screen.
This makes it much easier to work with large data.
In addition to its name, each column reports its type, a nice feature inspired by `str()`:

```{r}
tibble(
  a = lubridate::now() + runif(1e3) * 86400,
  b = lubridate::today() + runif(1e3) * 30,
  c = 1:1e3,
  d = runif(1e3),
  e = sample(letters, 1e3, replace = TRUE)
)
```

Where possible, tibbles also use color to draw your eye to important differences.
One of the most important distinctions is between the string `"NA"` and the missing value, `NA`:

```{r}
tibble(x = c("NA", NA))
```

Tibbles are designed to avoid overwhelming your console when you print large data frames.
But sometimes you need more output than the default display.
There are a few options that can help.

First, you can explicitly `print()` the data frame and control the number of rows (`n`) and the `width` of the display.
`width = Inf` will display all columns:

```{r}
library(nycflights13)

flights |> 
  print(n = 10, width = Inf)
```

You can also control the default print behavior by setting options:

-   `options(tibble.print_max = n, tibble.print_min = m)`: if more than `n` rows, print only `m` rows.
    Use `options(tibble.print_min = Inf)` to always show all rows.

-   Use `options(tibble.width = Inf)` to always print all columns, regardless of the width of the screen.

You can see a complete list of options by looking at the package help with `package?tibble`.

A final option is to use RStudio's built-in data viewer to get a scrollable view of the complete dataset.
This is also often useful at the end of a long chain of manipulations.

```{r}
#| eval: false

flights |> View()
```

### Exercises

1.  How can you tell if an object is a tibble?
    (Hint: try printing `mtcars`, which is a regular `data.frame`).

2.  Compare and contrast the following operations on a `data.frame` and equivalent tibble.
    What is different?
    Why might the default `data.frame` behaviors cause you frustration?

    ```{r}
    #| eval: false

    df <- data.frame(abc = 1, xyz = "a")
    df$x
    df[, "xyz"]
    df[, c("abc", "xyz")]
    ```

3.  If you have the name of a variable stored in an object, e.g. `var <- "mpg"`, how can you extract the reference variable from a tibble?

4.  What does `tibble::enframe()` do?
    When might you use it?

5.  What option controls how many additional column names are printed at the footer of a tibble?

## Summary

If this chapter leaves you wanting to learn more about tibbles, you might enjoy `vignette("tibble")`.
