# Layers {#sec-layers}

```{r}
#| results: "asis"
#| echo: false
source("_common.R")
status("drafting")
```

## Introduction

In this chapter, you'll learn about a wide variety of geometric objects you can use to represent your data in plots created with ggplot2.
Remember from @sec-geometric-objects that in ggplot2 syntax, visual objects that represent the data are called **geoms** and to define them, you use the geom functions (that start with `geom_`) that you add to `ggplot()`.
The ggplot2 package offers a large number of geometric objects, but it doesn't cover all possible plots one could make.
Therefore, we will also introduce a couple of ggplot2 extension packages you can use to access additional geometric objects not offered by ggplot2.

In addition , you will also learn about statistical transformations ggplot2 makes under the hood when creating a plot.
These transformations are used to calculate new values to plot, such as the heights of bars in a bar plot or medians in a box plot.

### Prerequisites

This chapter focuses on ggplot2, one of the core packages in the tidyverse.
To access the datasets, help pages, and functions used in this chapter, load the tidyverse by running this code:

```{r}
#| label: setup

library(tidyverse)
```

## Aesthetic mappings

> "The greatest value of a picture is when it forces us to notice what we never expected to see." --- John Tukey

In the plot below, one group of points (highlighted in red) seems to fall outside of the linear trend.
These cars have a higher fuel efficiency than you might expect.
That is, they have a higher miles per gallon than other cars with similar engine sizes.
How can you explain these cars?

```{r}
#| echo: false
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars that 
#|   shows a negative association. Cars with engine size greater than 5 litres 
#|   and highway fuel efficiency greater than 20 miles per gallon stand out from 
#|   the rest of the data and are highlighted in red.

ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
  geom_point() + 
  geom_point(data = dplyr::filter(mpg, displ > 5, hwy > 20), color = "red", size = 1.6) +
  geom_point(data = dplyr::filter(mpg, displ > 5, hwy > 20), color = "red", size = 3, shape = "circle open")
```

Let's hypothesize that the cars are hybrids.
One way to test this hypothesis is to look at the `class` value for each car.
The `class` variable of the `mpg` dataset classifies cars into groups such as compact, midsize, and SUV.
If the outlying points are hybrids, they should be classified as compact cars or, perhaps, subcompact cars (keep in mind that this data was collected before hybrid trucks and SUVs became popular).

You can add a third variable, like `class`, to a two dimensional scatterplot by mapping it to an **aesthetic**.
An aesthetic is a visual property of the objects in your plot.
Aesthetics include things like the size, the shape, or the color of your points.
You can display a point (like the one below) in different ways by changing the values of its aesthetic properties.
Since we already use the word "value" to describe data, let's use the word "level" to describe aesthetic properties.
Here we change the levels of a point's size, shape, and color to make the point small, triangular, or blue:

```{r}
#| echo: false
#| fig.asp: 0.25
#| fig-width: 8
#| fig-alt: >
#|   Diagram that shows four plotting characters next to each other. The first 
#|   is a large circle, the second is a small circle, the third is a triangle, 
#|   and the fourth is a blue circle.

ggplot() +
  geom_point(aes(1, 1), size = 20) +
  geom_point(aes(2, 1), size = 10) + 
  geom_point(aes(3, 1), size = 20, shape = 17) + 
  geom_point(aes(4, 1), size = 20, color = "blue") + 
  scale_x_continuous(NULL, limits = c(0.5, 4.5), labels = NULL) + 
  scale_y_continuous(NULL, limits = c(0.9, 1.1), labels = NULL) + 
  theme(aspect.ratio = 1/3)
```

You can convey information about your data by mapping the aesthetics in your plot to the variables in your dataset.
For example, you can map the colors of your points to the `class` variable to reveal the class of each car.

```{r}
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars that 
#|   shows a negative association. The points representing each car are colored 
#|   according to the class of the car. The legend on the right of the plot 
#|   shows the mapping between colors and levels of the class variable: 
#|   2seater, compact, midsize, minivan, pickup, or suv.

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, color = class))
```

(If you prefer British English, like Hadley, you can use `colour` instead of `color`.)

To map an aesthetic to a variable, associate the name of the aesthetic with the name of the variable inside `aes()`.
ggplot2 will automatically assign a unique level of the aesthetic (here a unique color) to each unique value of the variable, a process known as **scaling**.
ggplot2 will also add a legend that explains which levels correspond to which values.

The colors reveal that many of the unusual points (with engine size greater than 5 liters and highway fuel efficiency greater than 20 miles per gallon) are two-seater cars.
These cars don't seem like hybrids, and are, in fact, sports cars!
Sports cars have large engines like SUVs and pickup trucks, but small bodies like midsize and compact cars, which improves their gas mileage.
In hindsight, these cars were unlikely to be hybrids since they have large engines.

In the above example, we mapped `class` to the `color` aesthetic, but we could have mapped `class` to the `size` aesthetic in the same way.
In this case, the exact size of each point would reveal its class affiliation.
We get a *warning* here: mapping an unordered variable (`class`) to an ordered aesthetic (`size`) is generally not a good idea because it implies a ranking that does not in fact exist.

```{r}
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars that 
#|   shows a negative association. The points representing each car are sized 
#|   according to the class of the car. The legend on the right of the plot 
#|   shows the mapping between sizes and levels of the class variable -- going 
#|   from small to large: 2seater, compact, midsize, minivan, pickup, or suv.

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, size = class))
```

Similarly, we could have mapped `class` to the `alpha` aesthetic, which controls the transparency of the points, or to the `shape` aesthetic, which controls the shape of the points.

```{r}
#| layout-ncol: 2
#| fig-width: 4
#| fig-height: 2
#| warning: false
#| fig-alt: >
#|   Two scatterplots next to each other, both visualizing highway fuel 
#|   efficiency versus engine size of cars and showing a negative association. 
#|   In the plot on the left class is mapped to the alpha aesthetic, resulting 
#|   in different transparency levels for each level of class. In the plot on 
#|   the right class is mapped the shape aesthetic, resulting in different 
#|   plotting character shapes for each level of class. Each plot comes with a 
#|   legend that shows the mapping between alpha level or shape and levels of 
#|   the class variable.

# Left
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, alpha = class))

# Right
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy, shape = class))
```

What happened to the SUVs?
ggplot2 will only use six shapes at a time.
By default, additional groups will go unplotted when you use the shape aesthetic.

For each aesthetic, you use `aes()` to associate the name of the aesthetic with a variable to display.
The `aes()` function gathers together each of the aesthetic mappings used by a layer and passes them to the layer's mapping argument.
The syntax highlights a useful insight about `x` and `y`: the x and y locations of a point are themselves aesthetics, visual properties that you can map to variables to display information about the data.

Once you map an aesthetic, ggplot2 takes care of the rest.
It selects a reasonable scale to use with the aesthetic, and it constructs a legend that explains the mapping between levels and values.
For x and y aesthetics, ggplot2 does not create a legend, but it creates an axis line with tick marks and a label.
The axis line acts as a legend; it explains the mapping between locations and values.

You can also *set* the aesthetic properties of your geom manually.
For example, we can make all of the points in our plot blue:

```{r}
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars that 
#|   shows a negative association. All points are blue.

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), color = "blue")
```

Here, the color doesn't convey information about a variable, but only changes the appearance of the plot.
To set an aesthetic manually, set the aesthetic by name as an argument of your geom function.
In other words, it goes *outside* of `aes()`.
You'll need to pick a value that makes sense for that aesthetic:

-   The name of a color as a character string.
-   The size of a point in mm.
-   The shape of a point as a number, as shown in @fig-shapes.

```{r}
#| label: fig-shapes
#| echo: false
#| warning: false
#| fig.asp: 0.364
#| fig-align: "center"
#| fig-cap: >
#|   R has 25 built in shapes that are identified by numbers. There are some 
#|   seeming duplicates: for example, 0, 15, and 22 are all squares. The 
#|   difference comes from the interaction of the `color` and `fill` 
#|   aesthetics. The hollow shapes (0--14) have a border determined by `color`; 
#|   the solid shapes (15--20) are filled with `color`; the filled shapes 
#|   (21--24) have a border of `color` and are filled with `fill`.
#| fig-alt: >
#|   Mapping between shapes and the numbers that represent them: 0 - square, 
#|   1 - circle, 2 - triangle point up, 3 - plus, 4 - cross, 5 - diamond, 
#|   6 - triangle point down, 7 - square cross, 8 - star, 9 - diamond plus, 
#|   10 - circle plus, 11 - triangles up and down, 12 - square plus, 
#|   13 - circle cross, 14 - square and triangle down, 15 - filled square, 
#|   16 - filled circle, 17 - filled triangle point-up, 18 - filled diamond, 
#|   19 - solid circle, 20 - bullet (smaller circle), 21 - filled circle blue, 
#|   22 - filled square blue, 23 - filled diamond blue, 24 - filled triangle 
#|   point-up blue, 25 - filled triangle point down blue.

shapes <- tibble(
  shape = c(0, 1, 2, 5, 3, 4, 6:19, 22, 21, 24, 23, 20),
  x = (0:24 %/% 5) / 2,
  y = (-(0:24 %% 5)) / 4
)
ggplot(shapes, aes(x, y)) + 
  geom_point(aes(shape = shape), size = 5, fill = "red") +
  geom_text(aes(label = shape), hjust = 0, nudge_x = 0.15) +
  scale_shape_identity() +
  expand_limits(x = 4.1) +
  scale_x_continuous(NULL, breaks = NULL) + 
  scale_y_continuous(NULL, breaks = NULL, limits = c(-1.2, 0.2)) + 
  theme_minimal() +
  theme(aspect.ratio = 1/2.75)
```

## Geometric objects {#sec-geometric-objects}

How are these two plots similar?

```{r}
#| echo: false
#| message: false
#| layout-ncol: 2
#| fig-width: 4
#| fig-height: 2
#| fig-alt: >
#|   There are two plots. The plot on the left is a scatterplot of highway 
#|   fuel efficiency versus engine size of cars and the plot on the right 
#|   shows a smooth curve that follows the trajectory of the relationship 
#|   between these variables. A confidence interval around the smooth 
#|   curve is also displayed.

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))

ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

Both plots contain the same x variable, the same y variable, and both describe the same data.
But the plots are not identical.
Each plot uses a different visual object to represent the data.
In ggplot2 syntax, we say that they use different **geoms**.

A **geom** is the geometrical object that a plot uses to represent data.
People often describe plots by the type of geom that the plot uses.
For example, bar charts use bar geoms, line charts use line geoms, boxplots use boxplot geoms, and so on.
Scatterplots break the trend; they use the point geom.
As we see above, you can use different geoms to plot the same data.
The plot on the left uses the point geom, and the plot on the right uses the smooth geom, a smooth line fitted to the data.

To change the geom in your plot, change the geom function that you add to `ggplot()`.
For instance, to make the plots above, you can use this code:

```{r}
#| eval: false

# Left
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))

# Right
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

Every geom function in ggplot2 takes a `mapping` argument.
However, not every aesthetic works with every geom.
You could set the shape of a point, but you couldn't set the "shape" of a line.
On the other hand, you *could* set the linetype of a line.
`geom_smooth()` will draw a different line, with a different linetype, for each unique value of the variable that you map to linetype.

```{r}
#| message: false
#| fig-alt: >
#|   A plot of highway fuel efficiency versus engine size of cars. The data are 
#|   represented with smooth curves, which use a different line type (solid, 
#|   dashed, or long dashed) for each type of drive train. Confidence intervals 
#|   around the smooth curves are also displayed.

ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
```

Here, `geom_smooth()` separates the cars into three lines based on their `drv` value, which describes a car's drive train.
One line describes all of the points that have a `4` value, one line describes all of the points that have an `f` value, and one line describes all of the points that have an `r` value.
Here, `4` stands for four-wheel drive, `f` for front-wheel drive, and `r` for rear-wheel drive.

If this sounds strange, we can make it more clear by overlaying the lines on top of the raw data and then coloring everything according to `drv`.

```{r}
#| echo: false
#| message: false
#| fig-alt: >
#|   A plot of highway fuel efficiency versus engine size of cars. The data 
#|   are represented with points (colored by drive train) as well as smooth 
#|   curves (where line type is determined based on drive train as well). 
#|   Confidence intervals around the smooth curves are also displayed.

ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + 
  geom_point() +
  geom_smooth(mapping = aes(linetype = drv))
```

Notice that this plot contains two geoms in the same graph!
If this makes you excited, buckle up.
You will learn how to place multiple geoms in the same plot very soon.

Many geoms, like `geom_smooth()`, use a single geometric object to display multiple rows of data.
For these geoms, you can set the `group` aesthetic to a categorical variable to draw multiple objects.
ggplot2 will draw a separate object for each unique value of the grouping variable.
In practice, ggplot2 will automatically group the data for these geoms whenever you map an aesthetic to a discrete variable (as in the `linetype` example).
It is convenient to rely on this feature because the `group` aesthetic by itself does not add a legend or distinguishing features to the geoms.

```{r}
#| layout-ncol: 3
#| fig-width: 3
#| fig-height: 3
#| message: false
#| fig-alt: >
#|   Three plots, each with highway fuel efficiency on the y-axis and engine 
#|   size of cars, where data are represented by a smooth curve. The first plot 
#|   only has these two variables, the center plot has three separate smooth 
#|   curves for each level of drive train, and the right plot not only has the 
#|   same three separate smooth curves for each level of drive train but these 
#|   curves are plotted in different colors, without a legend explaining which 
#|   color maps to which level. Confidence intervals around the smooth curves 
#|   are also displayed.

ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
              
ggplot(data = mpg) +
  geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
    
ggplot(data = mpg) +
  geom_smooth(
    mapping = aes(x = displ, y = hwy, color = drv),
    show.legend = FALSE
  )
```

To display multiple geoms in the same plot, add multiple geom functions to `ggplot()`:

```{r}
#| message: false
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars with a 
#|   smooth curve overlaid. A confidence interval around the smooth curves is 
#|   also displayed.

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy)) +
  geom_smooth(mapping = aes(x = displ, y = hwy))
```

This, however, introduces some duplication in our code.
Imagine if you wanted to change the y-axis to display `cty` instead of `hwy`.
You'd need to change the variable in two places, and you might forget to update one.
You can avoid this type of repetition by passing a set of mappings to `ggplot()`.
ggplot2 will treat these mappings as global mappings that apply to each geom in the graph.
In other words, this code will produce the same plot as the previous code:

```{r}
#| eval: false

ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point() + 
  geom_smooth()
```

If you place mappings in a geom function, ggplot2 will treat them as local mappings for the layer.
It will use these mappings to extend or overwrite the global mappings *for that layer only*.
This makes it possible to display different aesthetics in different layers.

```{r}
#| message: false
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars, where 
#|   points are colored according to the car class. A smooth curve following 
#|   the trajectory of the relationship between highway fuel efficiency versus 
#|   engine size of cars is overlaid along with a confidence interval around it.

ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth()
```

You can use the same idea to specify different `data` for each layer.
Here, our smooth line displays just a subset of the `mpg` dataset, the subcompact cars.
The local data argument in `geom_smooth()` overrides the global data argument in `ggplot()` for that layer only.

```{r}
#| message: false
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars, where 
#|   points are colored according to the car class. A smooth curve following 
#|   the trajectory of the relationship between highway fuel efficiency versus 
#|   engine size of subcompact cars is overlaid along with a confidence interval 
#|   around it.

ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
  geom_point(mapping = aes(color = class)) + 
  geom_smooth(data = filter(mpg, class == "subcompact"), se = FALSE)
```

(You'll learn how `filter()` works in the chapter on data transformations: for now, just know that this command selects only the subcompact cars.)

### Exercises

1.  What geom would you use to draw a line chart?
    A boxplot?
    A histogram?
    An area chart?

2.  Earlier in this chapter we used `show.legend` without explaining it:

    ```{r}
    #| eval: false
    ggplot(data = mpg) +
      geom_smooth(
        mapping = aes(x = displ, y = hwy, color = drv),
        show.legend = FALSE
      )
    ```

    What does `show.legend = FALSE` do here?
    What happens if you remove it?
    Why do you think we used it earlier?

3.  What does the `se` argument to `geom_smooth()` do?

4.  Recreate the R code necessary to generate the following graphs.
    Note that wherever a categorical variable is used in the plot, it's `drv`.

    ```{r}
    #| echo: false
    #| message: false
    #| layout-ncol: 2
    #| fig-width: 4
    #| fig-height: 2
    #| fig-alt: >
    #|   There are six scatterplots in this figure, arranged in a 3x2 grid. 
    #|   In all plots highway fuel efficiency of cars are on the y-axis and 
    #|   engine size is on the x-axis. The first plot shows all points in black 
    #|   with a smooth curve overlaid on them. In the second plot points are 
    #|   also all black, with separate smooth curves overlaid for each level of 
    #|   drive train. On the third plot, points and the smooth curves are 
    #|   represented in different colors for each level of drive train. In the 
    #|   fourth plot the points are represented in different colors for each 
    #|   level of drive train but there is only a single smooth line fitted to 
    #|   the whole data. In the fifth plot, points are represented in different 
    #|   colors for each level of drive train, and a separate smooth curve with 
    #|   different line types are fitted to each level of drive train. And 
    #|   finally in the sixth plot points are represented in different colors 
    #|   for each level of drive train and they have a thick white border.

    ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
      geom_point() + 
      geom_smooth(se = FALSE)
    ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
      geom_smooth(aes(group = drv), se = FALSE) +
      geom_point()
    ggplot(data = mpg, mapping = aes(x = displ, y = hwy, color = drv)) + 
      geom_point() + 
      geom_smooth(se = FALSE)
    ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
      geom_point(aes(color = drv)) + 
      geom_smooth(se = FALSE)
    ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
      geom_point(aes(color = drv)) +
      geom_smooth(aes(linetype = drv), se = FALSE)
    ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + 
      geom_point(size = 4, color = "white") + 
      geom_point(aes(color = drv))
    ```

Geoms are the fundamental building blocks of ggplot2.
Most geoms are associated with a named plot, e.g. `geom_histogram()` for making histograms or `geom_line()` for making a line plot.

ggplot2 provides more than 40 geoms, and extension packages provide even more (see <https://exts.ggplot2.tidyverse.org/gallery/> for a sampling).
The best way to get a comprehensive overview is the ggplot2 cheatsheet, which you can find at <https://rstudio.com/resources/cheatsheets>.
To learn more about any single geom, use the help (e.g. `?geom_smooth`).

### Exercises

<!-- TO DO: Add exercises -->

## Statistical transformations

Next, let's take a look at a bar chart.
Bar charts seem simple, but they are interesting because they reveal something subtle about plots.
Consider a basic bar chart, as drawn with `geom_bar()` or `geom_col()`.
The following chart displays the total number of diamonds in the `diamonds` dataset, grouped by `cut`.
The `diamonds` dataset is in the ggplot2 package and contains information on \~54,000 diamonds, including the `price`, `carat`, `color`, `clarity`, and `cut` of each diamond.
The chart shows that more diamonds are available with high quality cuts than with low quality cuts.

```{r}
#| fig-alt: >
#|   Bar chart of number of each cut of diamond. There are roughly 1500 
#|   Fair, 5000 Good, 12000 Very Good, 14000 Premium, and 22000 Ideal cut 
#|   diamonds.

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut))
```

On the x-axis, the chart displays `cut`, a variable from `diamonds`.
On the y-axis, it displays count, but count is not a variable in `diamonds`!
Where does count come from?
Many graphs, like scatterplots, plot the raw values of your dataset.
Other graphs, like bar charts, calculate new values to plot:

-   bar charts, histograms, and frequency polygons bin your data and then plot bin counts, the number of points that fall in each bin.

-   smoothers fit a model to your data and then plot predictions from the model.

-   boxplots compute a robust summary of the distribution and then display that summary as a specially formatted box.

The algorithm used to calculate new values for a graph is called a **stat**, short for statistical transformation.
@fig-vis-stat-bar shows how this process works with `geom_bar()`.

```{r}
#| label: fig-vis-stat-bar
#| echo: false
#| out-width: "100%"
#| fig-cap: >
#|   When create a bar chart we first start with the raw data, then
#|   aggregate it to count the number of observations in each bar,
#|   and finally map those computed variables to plot aesthetics.
#| fig-alt: >
#|   A figure demonstrating three steps of creating a bar chart. 
#|   Step 1. geom_bar() begins with the diamonds data set. Step 2. geom_bar() 
#|   transforms the data with the count stat, which returns a data set of 
#|   cut values and counts. Step 3. geom_bar() uses the transformed data to 
#|   build the plot. cut is mapped to the x-axis, count is mapped to the y-axis.

knitr::include_graphics("images/visualization-stat-bar.png")
```

You can learn which stat a geom uses by inspecting the default value for the `stat` argument.
For example, `?geom_bar` shows that the default value for `stat` is "count", which means that `geom_bar()` uses `stat_count()`.
`stat_count()` is documented on the same page as `geom_bar()`.
If you scroll down, the section called "Computed variables" explains that it computes two new variables: `count` and `prop`.

You can generally use geoms and stats interchangeably.
For example, you can recreate the previous plot using `stat_count()` instead of `geom_bar()`:

```{r}
#| fig-alt: >
#|   Bar chart of number of each cut of diamond. There are roughly 1500 
#|   Fair, 5000 Good, 12000 Very Good, 14000 Premium, and 22000 Ideal cut 
#|   diamonds.

ggplot(data = diamonds) + 
  stat_count(mapping = aes(x = cut))
```

This works because every geom has a default stat; and every stat has a default geom.
This means that you can typically use geoms without worrying about the underlying statistical transformation.
However, there are three reasons why you might need to use a stat explicitly:

1.  You might want to override the default stat.
    In the code below, we change the stat of `geom_bar()` from count (the default) to identity.
    This lets me map the height of the bars to the raw values of a $y$ variable.
    Unfortunately when people talk about bar charts casually, they might be referring to this type of bar chart, where the height of the bar is already present in the data, or the previous bar chart where the height of the bar is generated by counting rows.

    ```{r}
    #| warning: false
    #| fig-alt: >
    #|   Bar chart of number of each cut of diamond. There are roughly 1500 
    #|   Fair, 5000 Good, 12000 Very Good, 14000 Premium, and 22000 Ideal cut 
    #|   diamonds.

    demo <- tribble(
      ~cut,         ~freq,
      "Fair",       1610,
      "Good",       4906,
      "Very Good",  12082,
      "Premium",    13791,
      "Ideal",      21551
    )

    ggplot(data = demo) +
      geom_bar(mapping = aes(x = cut, y = freq), stat = "identity")
    ```

    (Don't worry that you haven't seen `<-` or `tribble()` before.
    You might be able to guess their meaning from the context, and you'll learn exactly what they do soon!)

2.  You might want to override the default mapping from transformed variables to aesthetics.
    For example, you might want to display a bar chart of proportions, rather than counts:

    ```{r}
    #| fig-alt: >
    #|   Bar chart of proportion of each cut of diamond. Roughly, Fair 
    #|   diamonds make up 0.03, Good 0.09, Very Good 0.22, Premium 26, and 
    #|   Ideal 0.40.

    ggplot(data = diamonds) + 
      geom_bar(mapping = aes(x = cut, y = after_stat(prop), group = 1))
    ```

    To find the variables computed by the stat, look for the section titled "computed variables" in the help for `geom_bar()`.

3.  You might want to draw greater attention to the statistical transformation in your code.
    For example, you might use `stat_summary()`, which summarizes the y values for each unique x value, to draw attention to the summary that you're computing:

    ```{r}
    #| fig-alt: >
    #|   A plot with depth on the y-axis and cut on the x-axis (with levels 
    #|   fair, good, very good, premium, and ideal) of diamonds. For each level 
    #|   of cut, vertical lines extend from minimum to maximum depth for diamonds 
    #|   in that cut category, and the median depth is indicated on the line 
    #|   with a point.

    ggplot(data = diamonds) + 
      stat_summary(
        mapping = aes(x = cut, y = depth),
        fun.min = min,
        fun.max = max,
        fun = median
      )
    ```

ggplot2 provides more than 20 stats for you to use.
Each stat is a function, so you can get help in the usual way, e.g. `?stat_bin`.
To see a complete list of stats, try the [ggplot2 cheatsheet](https://rstudio.com/resources/cheatsheets).

### Exercises

1.  What is the default geom associated with `stat_summary()`?
    How could you rewrite the previous plot to use that geom function instead of the stat function?

2.  What does `geom_col()` do?
    How is it different from `geom_bar()`?

3.  Most geoms and stats come in pairs that are almost always used in concert.
    Read through the documentation and make a list of all the pairs.
    What do they have in common?

4.  What variables does `stat_smooth()` compute?
    What parameters control its behaviour?

5.  In our proportion bar chart, we need to set `group = 1`.
    Why?
    In other words, what is the problem with these two graphs?

    ```{r}
    #| eval: false

    ggplot(data = diamonds) + 
      geom_bar(mapping = aes(x = cut, y = after_stat(prop)))
    ggplot(data = diamonds) + 
      geom_bar(mapping = aes(x = cut, fill = color, y = after_stat(prop)))
    ```

## Position adjustments

There's one more piece of magic associated with bar charts.
You can color a bar chart using either the `color` aesthetic, or, more usefully, `fill`:

```{r}
#| layout-ncol: 2
#| fig-width: 4
#| fig-height: 2
#| fig-alt: >
#|   Two bar charts of cut of diamonds. In the first plot, the bars have colored 
#|   borders. In the second plot, they're filled with colors. Heights of the 
#|   bars correspond to the number of diamonds in each cut category.

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = cut))
```

Note what happens if you map the fill aesthetic to another variable, like `clarity`: the bars are automatically stacked.
Each colored rectangle represents a combination of `cut` and `clarity`.

```{r}
#| fig-alt: >
#|   Segmented bar chart of cut of diamonds, where each bar is filled with 
#|   colors for the levels of clarity. Heights of the bars correspond to the 
#|   number of diamonds in each cut category, and heights of the colored 
#|   segments are proportional to the number of diamonds with a given clarity 
#|   level within a given cut level.

ggplot(data = diamonds) + 
  geom_bar(mapping = aes(x = cut, fill = clarity))
```

The stacking is performed automatically using the **position adjustment** specified by the `position` argument.
If you don't want a stacked bar chart, you can use one of three other options: `"identity"`, `"dodge"` or `"fill"`.

-   `position = "identity"` will place each object exactly where it falls in the context of the graph.
    This is not very useful for bars, because it overlaps them.
    To see that overlapping we either need to make the bars slightly transparent by setting `alpha` to a small value, or completely transparent by setting `fill = NA`.

    ```{r}
    #| layout-ncol: 2
    #| fig-width: 4
    #| fig-height: 2
    #| fig-alt: >
    #|   Two segmented bar charts of cut of diamonds, where each bar is filled 
    #|   with colors for the levels of clarity. Heights of the bars correspond 
    #|   to the number of diamonds in each cut category, and heights of the 
    #|   colored segments are proportional to the number of diamonds with a 
    #|   given clarity level within a given cut level. However the segments 
    #|   overlap. In the first plot the segments are filled with transparent 
    #|   colors, in the second plot the segments are only outlined with colors.

    ggplot(data = diamonds, mapping = aes(x = cut, fill = clarity)) + 
      geom_bar(alpha = 1/5, position = "identity")
    ggplot(data = diamonds, mapping = aes(x = cut, color = clarity)) + 
      geom_bar(fill = NA, position = "identity")
    ```

    The identity position adjustment is more useful for 2d geoms, like points, where it is the default.

-   `position = "fill"` works like stacking, but makes each set of stacked bars the same height.
    This makes it easier to compare proportions across groups.

    ```{r}
    #| fig-alt: >
    #|   Segmented bar chart of cut of diamonds, where each bar is filled with 
    #|   colors for the levels of clarity. Height of each bar is 1 and heights 
    #|   of the colored segments are proportional to the proportion of diamonds 
    #|   with a given clarity level within a given cut level.

    ggplot(data = diamonds) + 
      geom_bar(mapping = aes(x = cut, fill = clarity), position = "fill")
    ```

-   `position = "dodge"` places overlapping objects directly *beside* one another.
    This makes it easier to compare individual values.

    ```{r}
    #| fig-alt: >
    #|   Dodged bar chart of cut of diamonds. Dodged bars are grouped by levels 
    #|   of cut (fair, good, very good, premium, and ideal). In each group there 
    #|   are eight bars, one for each level of clarity, and filled with a 
    #|   different color for each level. Heights of these bars represent the 
    #|   number of diamonds with a given level of cut and clarity.

    ggplot(data = diamonds) + 
      geom_bar(mapping = aes(x = cut, fill = clarity), position = "dodge")
    ```

There's one other type of adjustment that's not useful for bar charts, but can be very useful for scatterplots.
Recall our first scatterplot.
Did you notice that the plot displays only 126 points, even though there are 234 observations in the dataset?

```{r}
#| echo: false
#| fig-alt: >
#|   Scatterplot of highway fuel efficiency versus engine size of cars that 
#|   shows a negative association.

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy))
```

The underlying values of `hwy` and `displ` are rounded so the points appear on a grid and many points overlap each other.
This problem is known as **overplotting**.
This arrangement makes it difficult to see the distribution of the data.
Are the data points spread equally throughout the graph, or is there one special combination of `hwy` and `displ` that contains 109 values?

You can avoid this gridding by setting the position adjustment to "jitter".
`position = "jitter"` adds a small amount of random noise to each point.
This spreads the points out because no two points are likely to receive the same amount of random noise.

```{r}
#| fig-alt: >
#|   Jittered scatterplot of highway fuel efficiency versus engine size of cars. 
#|   The plot shows a negative association.

ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), position = "jitter")
```

Adding randomness seems like a strange way to improve your plot, but while it makes your graph less accurate at small scales, it makes your graph *more* revealing at large scales.
Because this is such a useful operation, ggplot2 comes with a shorthand for `geom_point(position = "jitter")`: `geom_jitter()`.

To learn more about a position adjustment, look up the help page associated with each adjustment: `?position_dodge`, `?position_fill`, `?position_identity`, `?position_jitter`, and `?position_stack`.

### Exercises

1.  What is the problem with this plot?
    How could you improve it?

    ```{r}
    #| fig-alt: >
    #|   Scatterplot of highway fuel efficiency versus city fuel efficiency 
    #|   of cars that shows a positive association. The number of points 
    #|   visible in this plot is less than the number of points in the dataset.

    ggplot(data = mpg, mapping = aes(x = cty, y = hwy)) + 
      geom_point()
    ```

2.  What parameters to `geom_jitter()` control the amount of jittering?

3.  Compare and contrast `geom_jitter()` with `geom_count()`.

4.  What's the default position adjustment for `geom_boxplot()`?
    Create a visualization of the `mpg` dataset that demonstrates it.

## Summary

An important lesson you should take from this chapter is that when you feel the need for a geom that is not provided by ggplot2, it's always a good idea to look into whether someone else has already solved your problem by creating a ggplot2 extension package that offers that geom.

We then gave you a whirlwind tour of the geoms and stats which control the "type" of graph you get, whether it's a scatterplot, line plot, histogram, or something else.
